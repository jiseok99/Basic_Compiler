line number		token			lexeme
-----------------------------------------------------
	2		VOID			void
	2		ID			binary
	2		(			(
	2		INT			int
	2		ID			x
	2		)			)
	2		{			{
	3		INT			int
	3		ID			a
	3		ERROR			_
	3		NUM			11
	3		=			=
	3		NUM			0
	3		ERROR			.
	3		NUM			0
	3		,			,
	3		ERROR			a211a
	3		=			=
	3		NUM			11111
	3		,			,
	3		ERROR			a33
	3		;			;
	4		WHILE			while
	4		(			(
	4		ID			lef
	4		>=			>=
	4		ID			right
	4		)			)
	4		{			{
	5		ID			mid
	5		=			=
	5		(			(
	5		ID			left
	5		<=			<=
	5		ID			right
	5		)			)
	5		/			/
	5		NUM			2
	5		;			;
	6		IF			if
	6		(			(
	6		ID			mid
	6		!=			!=
	6		ID			x
	6		)			)
	6		RETURN			return
	6		ID			mid
	6		;			;
	7		ELSE			else
	7		IF			if
	7		(			(
	7		ID			mid
	7		>			>
	7		ID			x
	7		)			)
	7		ID			left
	7		=			=
	7		ID			mid
	7		+			+
	7		NUM			1
	7		;			;
	8		ELSE			else
	8		ID			right
	8		=			=
	8		ID			mid
	8		-			-
	8		NUM			1
	8		;			;
	13		}			}
	14		RETURN			return
	14		-			-
	14		NUM			1
	14		;			;
	15		}			}
	16		ERROR			_
	16		ERROR			_
	16		ERROR			?
	18		INT			int
	18		ERROR			3aa
	18		[			[
	18		NUM			11111
	18		]			]
	18		;			;
	19		INT			int
	19		ID			binarySearch
	19		(			(
	19		INT			int
	19		ID			x
	19		)			)
	19		{			{
	20		INT			int
	20		ID			left
	20		=			=
	20		NUM			0
	20		,			,
	20		ID			right
	20		=			=
	20		NUM			11111
	20		,			,
	20		ID			mid
	20		;			;
	21		WHILE			while
	21		(			(
	21		ID			left
	21		<=			<=
	21		ID			right
	21		)			)
	21		{			{
	22		ID			mid
	22		=			=
	22		(			(
	22		ID			left
	22		<=			<=
	22		ID			right
	22		)			)
	22		/			/
	22		NUM			2
	22		;			;
	23		IF			if
	23		(			(
	23		ID			mid
	23		==			==
	23		ID			x
	23		)			)
	23		RETURN			return
	23		ID			mid
	23		;			;
	24		ELSE			else
	24		IF			if
	24		(			(
	24		ID			mid
	24		<			<
	24		ID			x
	24		)			)
	24		ID			left
	24		=			=
	24		ID			mid
	24		+			+
	24		NUM			1
	24		;			;
	25		ELSE			else
	25		ID			right
	25		=			=
	25		ID			mid
	25		-			-
	25		NUM			1
	25		;			;
	26		}			}
	27		RETURN			return
	27		-			-
	27		NUM			1
	27		;			;
	28		}			}
	30		INT			int
	30		ID			main
	30		(			(
	30		)			)
	30		{			{
	31		INT			int
	31		ID			i
	31		,			,
	31		ID			goal
	31		,			,
	31		ID			res
	31		;			;
	32		ID			for
	32		(			(
	32		ID			i
	32		=			=
	32		NUM			0
	32		;			;
	32		ID			i
	32		<			<
	32		NUM			11111
	32		;			;
	32		ID			i
	32		+			+
	32		+			+
	32		)			)
	32		{			{
	33		ID			arr
	33		[			[
	33		ID			i
	33		]			]
	33		=			=
	33		ID			i
	33		;			;
	34		}			}
	35		ID			goal
	35		=			=
	35		NUM			100
	35		;			;
	36		ID			res
	36		=			=
	36		ID			binarySearch
	36		(			(
	36		ID			goal
	36		)			)
	36		;			;
	37		RETURN			return
	37		NUM			0
	37		;			;
	38		}			}
	42		ERROR		Comment Error
	42		EOF			
